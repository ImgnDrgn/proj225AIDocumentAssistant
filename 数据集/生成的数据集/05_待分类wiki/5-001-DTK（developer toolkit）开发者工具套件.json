{
  "data": [
    {
      "title": "DTK（developer toolkit）开发者工具套件",
      "paragraphs": [
        {
          "context": "dtkdeclarative 开发控件库用于构建原生的行云设计风格应用程序，基于 Qt Quick 和 Qt Qml 基础框架，代码设计借鉴 qtdeclarative 并实现 Qt Quick Controls 2 全控件覆盖，拓展了颜色风格、视觉特效等特性。",
          "qas": [
            {
              "question": "dtkdeclarative 用于构建什么风格的应用程序？",
              "id": "5-1-1",
              "answers": [
                {
                  "text": "原生的行云设计风格",
                  "answer_start": 27
                }
              ]
            },
            {
              "question": "dtkdeclarative 基于哪些基础框架开发？",
              "id": "5-1-2",
              "answers": [
                {
                  "text": "Qt Quick 和 Qt Qml",
                  "answer_start": 53
                }
              ]
            }
          ]
        },
        {
          "context": "dtkdeclarative 基于 Qt Quick，dtkwidget 基于 Qt Widgets。Qt Widgets 使用 C++，Qt Quick 使用 QML；Qt Widgets 适合桌面应用，兼容低性能硬件；Qt Quick 适用于桌面和移动端，触控交互和动效体验有优势，需更多硬件性能。",
          "qas": [
            {
              "question": "dtkdeclarative 和 dtkwidget 分别基于什么框架？",
              "id": "5-1-3",
              "answers": [
                {
                  "text": "dtkdeclarative 基于 Qt Quick，dtkwidget 基于 Qt Widgets",
                  "answer_start": 0
                }
              ]
            },
            {
              "question": "Qt Widgets 和 Qt Quick 分别使用什么开发语言？",
              "id": "5-1-4",
              "answers": [
                {
                  "text": "Qt Widgets 使用 C++，Qt Quick 使用 QML",
                  "answer_start": 57
                }
              ]
            }
          ]
        },
        {
          "context": "dtkwidget 实现100x100红色矩形需重写 paintEvent，用 QPainter 绘制；dtkdeclarative 则通过 Rectangle 组件设置宽高和颜色。",
          "qas": [
            {
              "question": "dtkwidget 如何实现100x100的红色矩形？",
              "id": "5-1-5",
              "answers": [
                {
                  "text": "重写 paintEvent，用 QPainter 绘制",
                  "answer_start": 0
                }
              ]
            },
            {
              "question": "dtkdeclarative 实现100x100红色矩形的方式是什么？",
              "id": "5-1-6",
              "answers": [
                {
                  "text": "通过 Rectangle 组件设置宽高和颜色",
                  "answer_start": 53
                }
              ]
            }
          ]
        },
        {
          "context": "dtkwidget 用 QHBoxLayout、QVBoxLayout 等布局；dtkdeclarative 可使用锚布局和布局器，如 RowLayout 并设置 Layout 附加属性。",
          "qas": [
            {
              "question": "dtkwidget 常用的布局方式有哪些？",
              "id": "5-1-7",
              "answers": [
                {
                  "text": "QHBoxLayout、QVBoxLayout",
                  "answer_start": 11
                }
              ]
            },
            {
              "question": "dtkdeclarative 有哪些布局方式？",
              "id": "5-1-8",
              "answers": [
                {
                  "text": "锚布局和布局器（如 RowLayout）",
                  "answer_start": 46
                }
              ]
            }
          ]
        },
        {
          "context": "dtkwidget 用 QObject::connect 连接按钮点击事件；dtkdeclarative 可通过 on<Signal> 或 Connections 方式，5.15以上版本 Connections 用 function 定义信号处理。",
          "qas": [
            {
              "question": "dtkwidget 如何连接按钮点击事件？",
              "id": "5-1-9",
              "answers": [
                {
                  "text": "用 QObject::connect",
                  "answer_start": 0
                }
              ]
            },
            {
              "question": "dtkdeclarative 中5.15以上版本如何用 Connections 连接信号？",
              "id": "5-1-10",
              "answers": [
                {
                  "text": "用 function 定义信号处理",
                  "answer_start": 115
                }
              ]
            }
          ]
        },
        {
          "context": "dtkdeclarative 模块包括 org.deepin.dtk.impl、org.deepin.dtk.controls、org.deepin.dtk.style、org.deepin.dtk.settings、org.deepin.dtk，其中 settings 和 dtk 模块为公开。",
          "qas": [
            {
              "question": "dtkdeclarative 有哪些模块？",
              "id": "5-1-11",
              "answers": [
                {
                  "text": "org.deepin.dtk.impl、org.deepin.dtk.controls、org.deepin.dtk.style、org.deepin.dtk.settings、org.deepin.dtk",
                  "answer_start": 25
                }
              ]
            },
            {
              "question": "dtkdeclarative 中哪些模块是公开的？",
              "id": "5-1-12",
              "answers": [
                {
                  "text": "org.deepin.dtk.settings、org.deepin.dtk",
                  "answer_start": 139
                }
              ]
            }
          ]
        },
        {
          "context": "DCI图标是.dci后缀的归档打包格式，mimetype为image/dci，继承于application/octet-stream，magic值为DCI，能满足多种交互状态、图标类型和DPI缩放需求。",
          "qas": [
            {
              "question": "DCI图标的文件后缀是什么？",
              "id": "5-1-13",
              "answers": [
                {
                  "text": ".dci",
                  "answer_start": 11
                }
              ]
            },
            {
              "question": "DCI图标的magic值是什么？",
              "id": "5-1-14",
              "answers": [
                {
                  "text": "DCI",
                  "answer_start": 92
                }
              ]
            }
          ]
        },
        {
          "context": "ColorSelector 由调色板、控件属性和取舍器组成，替代 QPalette 实现颜色管理扩展，Palette 可指定正常、悬停等状态颜色，区分明暗主题，控制启用状态，使用颜色族，兼容 QPalette。",
          "qas": [
            {
              "question": "ColorSelector 由哪些部分组成？",
              "id": "5-1-15",
              "answers": [
                {
                  "text": "调色板、控件属性和取舍器",
                  "answer_start": 18
                }
              ]
            },
            {
              "question": "Palette 能区分什么主题？",
              "id": "5-1-16",
              "answers": [
                {
                  "text": "明暗主题",
                  "answer_start": 104
                }
              ]
            }
          ]
        },
        {
          "context": "dtkdeclarative 的 Settings 框架用树状视图代码风格，替代 dtkwidget 中基于Json的SettingDialog，Config配置项可关联到SettingDialog，实现设置选项与配置选项打通，支持属性绑定。",
          "qas": [
            {
              "question": "dtkdeclarative 的 Settings 框架替代了什么？",
              "id": "5-1-17",
              "answers": [
                {
                  "text": "dtkwidget 中基于Json的SettingDialog",
                  "answer_start": 50
                }
              ]
            },
            {
              "question": "Config配置项有什么作用？",
              "id": "5-1-18",
              "answers": [
                {
                  "text": "可关联到SettingDialog，实现设置选项与配置选项打通，支持属性绑定",
                  "answer_start": 89
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}