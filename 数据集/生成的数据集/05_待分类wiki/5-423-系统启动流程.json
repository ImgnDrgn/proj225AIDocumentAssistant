{
  "data": [
    {
      "title": "系统启动流程",
      "paragraphs": [
        {
          "context": "开机过程指的是从打开计算机电源直到 Linux 显示用户登录画面的全过程。分析 Linux 开机过程也是深入了解 Linux 内核工作原理一个很好的途径。",
          "qas": [
            {
              "id": "5-423-1",
              "question": "Linux开机过程指的是从什么阶段到什么阶段的全过程？",
              "answers": [
                {
                  "text": "从打开计算机电源直到 Linux 显示用户登录画面的全过程",
                  "answer_start": 0
                }
              ]
            },
            {
              "id": "5-423-2",
              "question": "分析Linux开机过程有什么作用？",
              "answers": [
                {
                  "text": "是深入了解 Linux 内核工作原理一个很好的途径",
                  "answer_start": 36
                }
              ]
            }
          ]
        },
        {
          "context": "当你打开计算机电源，计算机会首先加载 BIOS 信息，BIOS 信息是如此的重要，以至于计算机必须在最开始就找到它。这是因为 BIOS 中包含了 CPU 的相关信息、设备启动顺序信息、硬盘信息、内存信息、时钟信息、PnP 特性等等。在此之后，计算机心里就有谱了，知道应该去读取哪个硬件设备了。在 BIOS 将系统的控制权交给硬盘第一个扇区之后，就开始由 Linux 来控制系统了。",
          "qas": [
            {
              "id": "5-423-3",
              "question": "打开计算机电源后，计算机会首先加载什么信息？",
              "answers": [
                {
                  "text": "BIOS 信息",
                  "answer_start": 18
                }
              ]
            },
            {
              "id": "5-423-4",
              "question": "BIOS中包含哪些重要信息？",
              "answers": [
                {
                  "text": "CPU 的相关信息、设备启动顺序信息、硬盘信息、内存信息、时钟信息、PnP 特性等等",
                  "answer_start": 57
                }
              ]
            },
            {
              "id": "5-423-5",
              "question": "BIOS将系统控制权交给哪里后，开始由Linux控制系统？",
              "answers": [
                {
                  "text": "硬盘第一个扇区",
                  "answer_start": 134
                }
              ]
            }
          ]
        },
        {
          "context": "硬盘上第0磁道第一个扇区被称为 MBR，也就是 Master Boot Record，即主引导记录，它的大小是512字节，可里面却存放了预启动信息、分区表信息。可分为两部分：第一部分为引导（PRE-BOOT）区，占了446个字节；第二部分为分区表（PARTITION TABLE），共有64个字节，记录硬盘的分区信息。预引导区的作用之一是找到标记为活动（ACTIVE）的分区，并将活动分区的引导区读入内存。剩余两个字节为结束标记。系统找到 BIOS 所指定的硬盘的 MBR 后，就会将其复制到 0×7c00 地址所在的物理内存中。其实被复制到物理内存的内容就是 Boot Loader，而具体到你的电脑，那就是 lilo 或者 grub 了。",
          "qas": [
            {
              "id": "5-423-6",
              "question": "硬盘上第0磁道第一个扇区被称为什么？其英文全称是什么？",
              "answers": [
                {
                  "text": "MBR，也就是 Master Boot Record（主引导记录）",
                  "answer_start": 12
                }
              ]
            },
            {
              "id": "5-423-7",
              "question": "MBR的大小是多少字节？里面存放了什么信息？",
              "answers": [
                {
                  "text": "512字节，存放了预启动信息、分区表信息",
                  "answer_start": 45
                }
              ]
            },
            {
              "id": "5-423-8",
              "question": "MBR分为哪两部分？各自的占用字节数和作用是什么？",
              "answers": [
                {
                  "text": "第一部分为引导（PRE-BOOT）区，占446个字节；第二部分为分区表（PARTITION TABLE），占64个字节，记录硬盘的分区信息",
                  "answer_start": 73
                }
              ]
            },
            {
              "id": "5-423-9",
              "question": "MBR中预引导区的作用之一是什么？剩余两个字节是什么？",
              "answers": [
                {
                  "text": "找到标记为活动（ACTIVE）的分区，并将活动分区的引导区读入内存；剩余两个字节为结束标记",
                  "answer_start": 156
                }
              ]
            },
            {
              "id": "5-423-10",
              "question": "系统找到BIOS指定硬盘的MBR后，会将其复制到哪个地址的物理内存中？复制到内存的内容是什么？",
              "answers": [
                {
                  "text": "0×7c00 地址所在的物理内存中；被复制到物理内存的内容是 Boot Loader（具体到电脑可能是 lilo 或者 grub）",
                  "answer_start": 229
                }
              ]
            }
          ]
        },
        {
          "context": "启动加载器（Boot Loader）就是在操作系统内核运行之前运行的一段小程序。通过这段小程序，我们可以初始化硬件设备、建立内存空间的映射图，从而将系统的软硬件环境带到一个合适的状态，以便为最终调用操作系统内核做好一切准备。通常，Boot Loader 是严重地依赖于硬件而实现的，不同体系结构的系统存在着不同的 Boot Loader。Linux的引导扇区内容是采用汇编语言编写的程序，其源代码在 arch/i386/boot 中（不同体系的CPU有其各自的 boot 目录），有4个程序文件: bootsect.S，引导扇区的主程序，汇编后的代码不超过512字节，即一个扇区的大小；setup.S，引导辅助程序；edd.S，辅助程序的一部分，用于支持BIOS增强磁盘设备服务；video.S，辅助程序的另一部分，用于引导时的屏幕显示。Boot Loader 有若干种，其中 Grub、Lilo 和 spfdisk 是常见的 loader，这里以 Grub 为例来讲解吧。系统读取内存中的 grub 配置信息（一般为 menu.lst 或 grub.lst），并依照此配置信息来启动不同的操作系统。",
          "qas": [
            {
              "id": "5-423-11",
              "question": "什么是启动加载器（Boot Loader）？其主要作用是什么？",
              "answers": [
                {
                  "text": "在操作系统内核运行之前运行的一段小程序；作用是初始化硬件设备、建立内存空间的映射图，将系统的软硬件环境带到合适状态，为调用操作系统内核做准备",
                  "answer_start": 0
                }
              ]
            },
            {
              "id": "5-423-12",
              "question": "Boot Loader的实现有什么特点？不同体系结构的系统的Boot Loader是否相同？",
              "answers": [
                {
                  "text": "严重地依赖于硬件而实现；不同体系结构的系统存在着不同的 Boot Loader",
                  "answer_start": 115
                }
              ]
            },
            {
              "id": "5-423-13",
              "question": "Linux引导扇区内容的源代码存放目录是什么（以i386体系CPU为例）？包含哪4个程序文件及各自作用？",
              "answers": [
                {
                  "text": "源代码在 arch/i386/boot 中（不同体系的CPU有其各自的 boot 目录）；4个程序文件：1. bootsect.S：引导扇区的主程序，汇编后代码不超过512字节；2. setup.S：引导辅助程序；3. edd.S：支持BIOS增强磁盘设备服务的辅助程序；4. video.S：引导时屏幕显示的辅助程序",
                  "answer_start": 168
                }
              ]
            },
            {
              "id": "5-423-14",
              "question": "常见的Boot Loader有哪些？以Grub为例，系统读取的grub配置信息一般是什么文件？",
              "answers": [
                {
                  "text": "常见的有 Grub、Lilo 和 spfdisk；grub配置信息一般为 menu.lst 或 grub.lst",
                  "answer_start": 403
                }
              ]
            }
          ]
        },
        {
          "context": "根据 grub 设定的内核映像所在路径，系统读取内存映像，并进行解压缩操作。此时，屏幕一般会输出“Uncompressing Linux（解压内核中）”的提示。当解压缩内核完成后，屏幕输出“OK, booting the kernel（正在启动内核）”。系统将解压后的内核放置在内存之中，并调用 start_kernel() 函数来启动一系列的初始化函数并初始化各种设备，完成 Linux 核心环境的建立。start_kernel() 定义在 init/main.c 中，它就类似于一般可执行程序中的 main() 函数，系统在此之前所做的仅仅是一些能让内核程序最低限度执行的初始化操作，真正的内核初始化过程是从这里才开始。start_kernel() 中会执行打印内核版本信息、setup_arch()（系统结构设置）、sched_init()（调度机制初始化）等操作。start_kernel() 结尾，内核通过 kernel_thread() 创建第一个系统内核线程（1号进程），执行内核中的 init() 函数，最后调用 cpues_idle() 函数，因1号进程就绪，转向 init() 函数继续启动。",
          "qas": [
            {
              "id": "5-423-15",
              "question": "根据grub设定启动内核时，系统读取内核映像后会进行什么操作？屏幕会输出哪些提示？",
              "answers": [
                {
                  "text": "进行解压缩操作；解压缩时输出“Uncompressing Linux（解压内核中）”，解压缩完成后输出“OK, booting the kernel（正在启动内核）”",
                  "answer_start": 28
                }
              ]
            },
            {
              "id": "5-423-16",
              "question": "系统将解压后的内核放置在哪里？通过调用什么函数完成Linux核心环境的建立？",
              "answers": [
                {
                  "text": "放置在内存之中；调用 start_kernel() 函数",
                  "answer_start": 136
                }
              ]
            },
            {
              "id": "5-423-17",
              "question": "start_kernel() 函数定义在哪个文件中？它类似于一般可执行程序中的什么函数？",
              "answers": [
                {
                  "text": "定义在 init/main.c 中；类似于一般可执行程序中的 main() 函数",
                  "answer_start": 188
                }
              ]
            },
            {
              "id": "5-423-18",
              "question": "start_kernel() 函数结尾，内核通过什么函数创建第一个系统内核线程（1号进程）？该线程执行什么函数？",
              "answers": [
                {
                  "text": "通过 kernel_thread() 函数；执行内核中的 init() 函数",
                  "answer_start": 354
                }
              ]
            }
          ]
        },
        {
          "context": "内核被加载后，第一个运行的程序便是 /sbin/init，该文件会读取 /etc/inittab 文件，并依据此文件来进行初始化工作。/etc/inittab 文件最主要的作用就是设定 Linux 的运行等级，其设定形式是“：id:5:initdefault:”，表明Linux运行在等级5上。Linux的运行等级设定如下：0：关机；1：单用户模式；2：无网络支持的多用户模式；3：有网络支持的多用户模式；4：保留，未使用；5：有网络支持有X-Window支持的多用户模式；6：重新引导系统，即重启。",
          "qas": [
            {
              "id": "5-423-19",
              "question": "内核被加载后，第一个运行的程序是什么？该程序会读取哪个文件进行初始化？",
              "answers": [
                {
                  "text": "/sbin/init；读取 /etc/inittab 文件",
                  "answer_start": 13
                }
              ]
            },
            {
              "id": "5-423-20",
              "question": "/etc/inittab 文件最主要的作用是什么？其设定运行等级的示例形式是什么？",
              "answers": [
                {
                  "text": "设定 Linux 的运行等级；示例形式是“：id:5:initdefault:”",
                  "answer_start": 45
                }
              ]
            },
            {
              "id": "5-423-21",
              "question": "Linux的运行等级0、1、5、6分别对应什么状态？",
              "answers": [
                {
                  "text": "0：关机；1：单用户模式；5：有网络支持有X-Window支持的多用户模式；6：重新引导系统（重启）",
                  "answer_start": 103
                }
              ]
            }
          ]
        },
        {
          "context": "在设定了运行等级后，Linux 系统执行的第一个用户层文件就是 /etc/rc.d/rc.sysinit 脚本程序，它做的工作包括设定 PATH、设定网络配置（/etc/sysconfig/network）、启动 swap 分区、设定 /proc 等等。系统初始化大致内容：硬件的初始化、图像界面启动初始化；主机RAID的设置初始化、device mapper初始化；检测根文件系统并以只读方式挂载；激活 udev 和 selinux；设置内核参数 /etc/sysctl.conf；设置系统时钟；启用交换分区、设定主机名；加载键盘映射；激活 RAID 和 LVM 逻辑卷；挂载额外的文件系统 /etc/fstab；最后调用 login 让用户登录。",
          "qas": [
            {
              "id": "5-423-22",
              "question": "设定运行等级后，Linux系统执行的第一个用户层文件是什么？该文件主要做哪些工作？",
              "answers": [
                {
                  "text": "/etc/rc.d/rc.sysinit 脚本程序；工作包括设定 PATH、设定网络配置（/etc/sysconfig/network）、启动 swap 分区、设定 /proc 等",
                  "answer_start": 15
                }
              ]
            },
            {
              "id": "5-423-23",
              "question": "Linux系统初始化过程中，对根文件系统进行了什么操作？会激活哪些组件？",
              "answers": [
                {
                  "text": "检测根文件系统，并以只读方式挂载；激活 udev 和 selinux、RAID 和 LVM 逻辑卷",
                  "answer_start": 118
                }
              ]
            },
            {
              "id": "5-423-24",
              "question": "系统初始化过程中，如何设置系统时钟和主机名？如何挂载额外的文件系统？",
              "answers": [
                {
                  "text": "设置系统时钟通过系统初始化步骤完成，设定主机名也在初始化中完成；通过 /etc/fstab 挂载额外的文件系统",
                  "answer_start": 185
                }
              ]
            }
          ]
        },
        {
          "context": "线程 init 的最终完成状态是能让一般用户程序正常执行，主要操作有：执行 do_basic_setup() 对外部设备全面初始化；构建系统虚拟文件系统目录树，挂接根目录设备；打开 /dev/console，通过 sys_dup() 复制两次，使文件号 0、1、2 指向控制台（对应 stdin、stdout、stderr）；通过 execve() 加载用户层初始化程序，依次尝试“/sbin/init”、“/etc/init”、“/bin/init”、“/bin/sh”，成功则进入用户层初始化。",
          "qas": [
            {
              "id": "5-423-25",
              "question": "线程init执行的 do_basic_setup() 函数主要作用是什么？",
              "answers": [
                {
                  "text": "对外部设备进行全面地初始化",
                  "answer_start": 36
                }
              ]
            },
            {
              "id": "5-423-26",
              "question": "线程init中，系统如何设置标准I/O通道（stdin、stdout、stderr）？",
              "answers": [
                {
                  "text": "打开 /dev/console，通过 sys_dup() 函数将打开的连接复制两次，使得文件号 0、1、2 全部指向控制台，分别对应 stdin（标准输入）、stdout（标准输出）、stderr（标准出错信息）",
                  "answer_start": 64
                }
              ]
            },
            {
              "id": "5-423-27",
              "question": "内核通过哪个系统调用加载用户层初始化程序？依次尝试加载的程序有哪些？",
              "answers": [
                {
                  "text": "通过系统调用 execve()；依次尝试加载的程序有“/sbin/init”、“/etc/init”、“/bin/init”、“/bin/sh”",
                  "answer_start": 156
                }
              ]
            }
          ]
        },
        {
          "context": "具体是依据 /etc/modules.conf 文件或 /etc/modules.d 目录下的文件来装载内核模块。根据运行级别的不同，系统会运行 rc0.d 到 rc6.d 中的相应的脚本程序，来完成相应的初始化工作和启动相应的服务。系统会执行 /etc/rc.d/rc.local 脚本，该脚本在所有其他 init 脚本后执行，用户可在其中放置个性化初始化内容。此时，系统执行 /bin/login 程序，进入等待用户输入用户名和密码的登录状态。",
          "qas": [
            {
              "id": "5-423-28",
              "question": "系统装载内核模块依据的文件或目录是什么？",
              "answers": [
                {
                  "text": "/etc/modules.conf 文件或 /etc/modules.d 目录下的文件",
                  "answer_start": 8
                }
              ]
            },
            {
              "id": "5-423-29",
              "question": "根据运行级别的不同，系统会运行哪些目录中的脚本程序来完成初始化和启动服务？",
              "answers": [
                {
                  "text": "rc0.d 到 rc6.d 中的相应的脚本程序",
                  "answer_start": 56
                }
              ]
            },
            {
              "id": "5-423-30",
              "question": "/etc/rc.d/rc.local 脚本在什么时候执行？其作用是什么？",
              "answers": [
                {
                  "text": "在所有其他 init 脚本之后执行；作用是留给用户进行个性化初始化设置，用户可将想设置和启动的内容放到该文件中",
                  "answer_start": 101
                }
              ]
            },
            {
              "id": "5-423-31",
              "question": "系统进入登录状态时，会执行什么程序来等待用户输入用户名和密码？",
              "answers": [
                {
                  "text": "/bin/login 程序",
                  "answer_start": 204
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}