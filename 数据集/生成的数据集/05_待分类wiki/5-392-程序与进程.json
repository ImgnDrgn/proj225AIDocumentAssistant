{
  "title": "程序与进程",
  "paragraphs": [
    {
      "context": "源代码是指按照一定编写语言标志编写的代码，源代码经过编译或者解释后运行的则为程序。编程语言分类为：- 编译型语言：需要通过编译器将源代码编译为计算机能理解机器语言后，计算机才能执行高级编程语言（编译一次永久运行）。代表语言为C/C++，效率较高。- 解释型语言：不需要通过编译器编译，但是需要通过语言的解释器解释后，计算机才能执行高级编程语言（每运行一次就需要解释一次）。代表语言为Python，效率较低。- 脚本型语言：是为了缩短传统的编写-编译-链接-运行过程而创建的计算机编程语言。代表语言为JavaScript。效率较低。",
      "qas": [
        {
          "question": "源代码经过什么处理后运行的是程序？",
          "id": "5-392-1",
          "answers": [
            {
              "text": "编译或者解释",
              "answer_start": 5
            }
          ]
        },
        {
          "question": "编译型语言需要通过什么将源代码转换为机器语言？",
          "id": "5-392-2",
          "answers": [
            {
              "text": "编译器",
              "answer_start": 68
            }
          ]
        },
        {
          "question": "编译型语言的代表语言是什么？",
          "id": "5-392-3",
          "answers": [
            {
              "text": "C/C++",
              "answer_start": 135
            }
          ]
        },
        {
          "question": "解释型语言每运行一次需要做什么？",
          "id": "5-392-4",
          "answers": [
            {
              "text": "需要解释一次",
              "answer_start": 257
            }
          ]
        },
        {
          "question": "脚本型语言的代表语言是什么？",
          "id": "5-392-5",
          "answers": [
            {
              "text": "JavaScript",
              "answer_start": 371
            }
          ]
        },
        {
          "question": "脚本型语言的创建目的是什么？",
          "id": "5-392-6",
          "answers": [
            {
              "text": "缩短传统的编写-编译-链接-运行过程",
              "answer_start": 281
            }
          ]
        }
      ]
    },
    {
      "context": "进程和程序的区别:程序是指一段完成功能的代码，或者说是一个工具，它是一个静态的概念，而进程它是动态的，比如，linux的vi编辑器，它就是一段在linux下用于文本编辑的工具，那么它是一个程序，而我们在linux终端中，可以分别开启两个vi编辑器的进程。进程简单的说就是一个程序一次执行的过程，它是一个动态的概念。按照教科书上的定义，进程是程序执行的实例，是linux的基本调度单位。",
      "qas": [
        {
          "question": "程序是静态还是动态的概念？",
          "id": "5-392-7",
          "answers": [
            {
              "text": "静态",
              "answer_start": 42
            }
          ]
        },
        {
          "question": "进程是静态还是动态的概念？",
          "id": "5-392-8",
          "answers": [
            {
              "text": "动态",
              "answer_start": 60
            }
          ]
        },
        {
          "question": "进程简单来说是什么？",
          "id": "5-392-9",
          "answers": [
            {
              "text": "一个程序一次执行的过程",
              "answer_start": 177
            }
          ]
        },
        {
          "question": "教科书上对进程的定义是什么？",
          "id": "5-392-10",
          "answers": [
            {
              "text": "程序执行的实例，是linux的基本调度单位",
              "answer_start": 230
            }
          ]
        },
        {
          "question": "程序与进程的核心区别特征是什么？",
          "id": "5-392-11",
          "answers": [
            {
              "text": "程序是静态的概念，而进程它是动态的",
              "answer_start": 68
            }
          ]
        }
      ]
    },
    {
      "context": "一个进程由如下元素组成：- 进程的当前上下文，即进程的当前执行状态；- 进程的当前执行目录- 进程访问的文件和目录- 进程的访问权限，比如它的文件模式和所有权- 内存和其他分配给进程的系统资源",
      "qas": [
        {
          "question": "进程的当前上下文指的是什么？",
          "id": "5-392-12",
          "answers": [
            {
              "text": "进程的当前执行状态",
              "answer_start": 35
            }
          ]
        },
        {
          "question": "进程包含哪些元素？",
          "id": "5-392-13",
          "answers": [
            {
              "text": "进程的当前上下文，即进程的当前执行状态；进程的当前执行目录；进程访问的文件和目录；进程的访问权限，比如它的文件模式和所有权；内存和其他分配给进程的系统资源",
              "answer_start": 19
            }
          ]
        }
      ]
    },
    {
      "context": "在linux系统中，内核使用进程来控制对CPU和其他系统资源的访问，并且使用进程来决定在CPU上运行哪个程序，运行多久以及采用什么特性运行它。内核的调度器负责在所有的进程间分配CPU执行时间，称为时间片(time slice)，它轮流在每个进程分得的时间片用完后从进程那里抢回控制权。",
      "qas": [
        {
          "question": "linux系统中，内核用进程控制对哪些资源的访问？",
          "id": "5-392-14",
          "answers": [
            {
              "text": "CPU和其他系统资源",
              "answer_start": 31
            }
          ]
        },
        {
          "question": "内核的调度器负责分配什么？",
          "id": "5-392-15",
          "answers": [
            {
              "text": "CPU执行时间（时间片）",
              "answer_start": 130
            }
          ]
        },
        {
          "question": "时间片用完后，调度器会做什么？",
          "id": "5-392-16",
          "answers": [
            {
              "text": "从进程那里抢回控制权",
              "answer_start": 215
            }
          ]
        },
        {
          "question": "内核调度器如何分配CPU执行时间？",
          "id": "5-392-17",
          "answers": [
            {
              "text": "在所有的进程间分配CPU执行时间，称为时间片",
              "answer_start": 228
            }
          ]
        }
      ]
    },
    {
      "context": "OS会为每个进程分配一个唯一的整型ID，做为进程的标识号(pid)。进程除了自身的ID外，还有父进程ID(ppid),所有进程的祖先进程是同一个进程，它叫做init进程，ID为1，init进程是内核自检后的一个启动的进程。init进程负责引导系统、启动守护（后台）进程并且运行必要的程序。",
      "qas": [
        {
          "question": "进程的标识号是什么？",
          "id": "5-392-18",
          "answers": [
            {
              "text": "唯一的整型ID（pid）",
              "answer_start": 17
            }
          ]
        },
        {
          "question": "所有进程的祖先进程是什么？",
          "id": "5-392-19",
          "answers": [
            {
              "text": "init进程",
              "answer_start": 85
            }
          ]
        },
        {
          "question": "init进程的ID是多少？",
          "id": "5-392-20",
          "answers": [
            {
              "text": "1",
              "answer_start": 101
            }
          ]
        },
        {
          "question": "init进程负责什么？",
          "id": "5-392-21",
          "answers": [
            {
              "text": "引导系统、启动守护（后台）进程并且运行必要的程序",
              "answer_start": 133
            }
          ]
        }
      ]
    },
    {
      "context": "Linux 操作系统包括四种不同类型的进程它们是：交互进程、批处理进程、守护进程和僵尸进程（特殊进程）。每种进程都有自己的特点和属性。- 交互进程：是由一个Shell启动的进程。既可以在前台运行，也可以在后台运行。- 批处理进程:和终端没有联系，是一个进程序列。- 系统守护:进程是Linux系统启动时启动的进程，并在后台运行。- 僵尸进程（特殊进程）：是指已终止运行，但尚未被清除的进程。",
      "qas": [
        {
          "question": "Linux操作系统有哪四种进程类型？",
          "id": "5-392-22",
          "answers": [
            {
              "text": "交互进程、批处理进程、守护进程和僵尸进程（特殊进程）",
              "answer_start": 24
            }
          ]
        },
        {
          "question": "交互进程由什么启动？",
          "id": "5-392-23",
          "answers": [
            {
              "text": "一个Shell",
              "answer_start": 115
            }
          ]
        },
        {
          "question": "批处理进程与什么没有联系？",
          "id": "5-392-24",
          "answers": [
            {
              "text": "终端",
              "answer_start": 173
            }
          ]
        },
        {
          "question": "僵尸进程指的是什么？",
          "id": "5-392-25",
          "answers": [
            {
              "text": "已终止运行，但尚未被清除的进程",
              "answer_start": 282
            }
          ]
        },
        {
          "question": "Linux包含哪四类进程？",
          "id": "5-392-26",
          "answers": [
            {
              "text": "交互进程、批处理进程、守护进程、僵尸进程",
              "answer_start": 20
            }
          ]
        },
        {
          "question": "批处理进程的主要特征是什么？",
          "id": "5-392-27",
          "answers": [
            {
              "text": "和终端没有联系",
              "answer_start": 173
            }
          ]
        }
      ]
    },
    {
      "context": "说明：守护进程总是活跃的，一般是后台运行，守护进程一般是由系统在开机时通过脚本自动激活启动或超级管理用户root来启动。比如在 Fedora中，我们可以定义httpd 服务器的启动脚本的运行级别，此文件位于/etc/init.d目录下，文件名是httpd，/etc/init.d/httpd 就是httpd服务器的守护程序，当把它的运行级别设置为3和5时，当系统启动时，它会跟着启动。由于守护进程是一直运行着的，所以它所处的状态是等待请求处理任务。",
      "qas": [
        {
          "question": "守护进程一般由什么启动？",
          "id": "5-392-28",
          "answers": [
            {
              "text": "系统在开机时通过脚本自动激活启动或超级管理用户root",
              "answer_start": 45
            }
          ]
        },
        {
          "question": "在Fedora中，httpd服务器的启动脚本位于哪个目录？",
          "id": "5-392-29",
          "answers": [
            {
              "text": "/etc/init.d",
              "answer_start": 156
            }
          ]
        },
        {
          "question": "守护进程所处的状态是什么？",
          "id": "5-392-30",
          "answers": [
            {
              "text": "等待请求处理任务",
              "answer_start": 326
            }
          ]
        },
        {
          "question": "守护进程的启动方式是什么？",
          "id": "5-392-31",
          "answers": [
            {
              "text": "由系统在开机时通过脚本自动激活启动或root启动",
              "answer_start": 162
            }
          ]
        }
      ]
    },
    {
      "context": "进程的属性包括：进程ID（PID)：是唯一的数值，用来区分进程。父进程和父进程的ID（PPID)。启动进程的用户ID（UID）和所归属的组（GID）。进程状态：状态分为运行R、休眠S、僵尸Z。进程执行的优先级。进程所连接的终端名。进程资源占用：比如占用资源大小（内存、CPU占用量）。",
      "qas": [
        {
          "question": "进程ID（PID）的作用是什么？",
          "id": "5-392-32",
          "answers": [
            {
              "text": "唯一的数值，用来区分进程",
              "answer_start": 24
            }
          ]
        },
        {
          "question": "进程状态分为哪几种？",
          "id": "5-392-33",
          "answers": [
            {
              "text": "运行R、休眠S、僵尸Z",
              "answer_start": 110
            }
          ]
        },
        {
          "question": "进程的属性包括哪些？",
          "id": "5-392-34",
          "answers": [
            {
              "text": "进程ID（PID)；父进程和父进程的ID（PPID)；启动进程的用户ID（UID）和所归属的组（GID）；进程状态；进程执行的优先级；进程所连接的终端名；进程资源占用",
              "answer_start": 11
            }
          ]
        },
        {
          "question": "PID在进程中的作用是什么？",
          "id": "5-392-35",
          "answers": [
            {
              "text": "唯一的数值，用来区分进程",
              "answer_start": 29
            }
          ]
        },
        {
          "question": "进程状态分为哪三种类型？",
          "id": "5-392-36",
          "answers": [
            {
              "text": "运行R、休眠S、僵尸Z",
              "answer_start": 100
            }
          ]
        }
      ]
    },
    {
      "context": "父进程和子进程的关系是管理和被管理的关系，当父进程终止时，子进程也随之而终止。但子进程终止，父进程并不一定终止。",
      "qas": [
        {
          "question": "父进程和子进程是什么关系？",
          "id": "5-392-37",
          "answers": [
            {
              "text": "管理和被管理的关系",
              "answer_start": 13
            }
          ]
        },
        {
          "question": "当父进程终止时，子进程会怎样？",
          "id": "5-392-38",
          "answers": [
            {
              "text": "随之而终止",
              "answer_start": 47
            }
          ]
        },
        {
          "question": "当子进程终止时，父进程一定会终止吗？",
          "id": "5-392-39",
          "answers": [
            {
              "text": "不一定",
              "answer_start": 76
            }
          ]
        },
        {
          "question": "父子进程的基本关系是什么？",
          "id": "5-392-40",
          "answers": [
            {
              "text": "管理和被管理的关系",
              "answer_start": 0
            }
          ]
        },
        {
          "question": "父进程终止时子进程会怎样？",
          "id": "5-392-41",
          "answers": [
            {
              "text": "子进程也随之而终止",
              "answer_start": 31
            }
          ]
        }
      ]
    },
    {
      "context": "进程和程序的区别:程序是指一段完成功能的代码，或者说是一个工具，它是一个静态的概念，而进程它是动态的。进程是程序执行的实例，是linux的基本调度单位。一个进程由如下元素组成：进程的当前上下文；进程的当前执行目录；进程访问的文件和目录；进程的访问权限；内存和其他分配给进程的系统资源。内核的调度器负责在所有的进程间分配CPU执行时间，称为时间片。OS会为每个进程分配一个唯一的整型ID做为进程的标识号(pid)。进程还有父进程ID(ppid),所有进程的祖先进程是init进程，ID为1。",
      "qas": [
        {
          "question": "进程由哪些基本元素组成？",
          "id": "5-392-42",
          "answers": [
            {
              "text": "进程的当前上下文；进程的当前执行目录；进程访问的文件和目录；进程的访问权限；内存和其他分配给进程的系统资源",
              "answer_start": 126
            }
          ]
        },
        {
          "question": "所有进程的祖先进程是什么？",
          "id": "5-392-43",
          "answers": [
            {
              "text": "init进程",
              "answer_start": 336
            }
          ]
        }
      ]
    }
  ]
}