{
  "data": [
    {
      "title": "ML训练框架环境搭建篇",
      "paragraphs": [
        {
          "context": "本次试验准备的软硬件基础环境：系统 Deepin 20.6，CPU Intel i9-10900k，显卡 Nvidia RTX3090，内存 Corsair 32G DDR4 2133MHZ ×2，硬盘 Micron SSD 512G + Western Digital Corp HDD 2TB。",
          "qas": [
            {
              "id": "5-361-1",
              "question": "本次试验使用的系统版本是什么？",
              "answers": [
                {
                  "text": "Deepin 20.6",
                  "answer_start": 18
                }
              ]
            },
            {
              "id": "5-361-2",
              "question": "本次试验使用的显卡型号是什么？",
              "answers": [
                {
                  "text": "Nvidia RTX3090",
                  "answer_start": 42
                }
              ]
            },
            {
              "id": "5-361-3",
              "question": "本次试验使用的内存规格是什么？",
              "answers": [
                {
                  "text": "Corsair 32G DDR4 2133MHZ ×2",
                  "answer_start": 58
                }
              ]
            }
          ]
        },
        {
          "context": "检查是否安装NVIDIA闭源驱动需在终端执行命令nvidia-smi；若命令报错或不存在，需去NVIDIA官网下载驱动，deepin系统在官网选择Operating System为Linux 64 bit。",
          "qas": [
            {
              "id": "5-361-4",
              "question": "检测是否安装NVIDIA闭源驱动的终端命令是什么？",
              "answers": [
                {
                  "text": "nvidia-smi",
                  "answer_start": 27
                }
              ]
            },
            {
              "id": "5-361-5",
              "question": "deepin系统在NVIDIA官网下载驱动时，Operating System一栏应选择什么？",
              "answers": [
                {
                  "text": "Linux 64 bit",
                  "answer_start": 75
                }
              ]
            }
          ]
        },
        {
          "context": "deepin安装NVIDIA闭源驱动步骤：1.按Ctrl+Alt+F2打开tty，输入用户名密码后执行sudo init 3关闭图形界面；2.用sudo sh /YourSavePath/xxx.run安装驱动；3.安装完成后reboot重启，运行nvidia-smi或nvidia-settings验证。",
          "qas": [
            {
              "id": "5-361-6",
              "question": "安装NVIDIA闭源驱动时，打开tty的组合键是什么？",
              "answers": [
                {
                  "text": "Ctrl+Alt+F2",
                  "answer_start": 23
                }
              ]
            },
            {
              "id": "5-361-7",
              "question": "关闭图形界面的终端命令是什么？",
              "answers": [
                {
                  "text": "sudo init 3",
                  "answer_start": 54
                }
              ]
            },
            {
              "id": "5-361-8",
              "question": "验证NVIDIA闭源驱动安装成功的命令有哪些？",
              "answers": [
                {
                  "text": "nvidia-smi或nvidia-settings",
                  "answer_start": 106
                }
              ]
            }
          ]
        },
        {
          "context": "deepin安装Docker CE：先执行sudo apt update更新源，再用sudo apt install docker-ce安装；测试用sudo docker run hello-world，出现对应界面则安装成功。",
          "qas": [
            {
              "id": "5-361-9",
              "question": "deepin中安装Docker CE前更新源的命令是什么？",
              "answers": [
                {
                  "text": "sudo apt update",
                  "answer_start": 20
                }
              ]
            },
            {
              "id": "5-361-10",
              "question": "安装Docker CE的终端命令是什么？",
              "answers": [
                {
                  "text": "sudo apt install docker-ce",
                  "answer_start": 39
                }
              ]
            },
            {
              "id": "5-361-11",
              "question": "测试Docker安装是否成功的命令是什么？",
              "answers": [
                {
                  "text": "sudo docker run hello-world",
                  "answer_start": 66
                }
              ]
            }
          ]
        },
        {
          "context": "安装nvidia-container-toolkit：添加源用curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -和curl -s -L https://nvidia.github.io/nvidia-docker/debian10/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list；再执行sudo apt update、sudo apt install -y nvidia-container-toolkit，最后sudo systemctl restart docker；测试用sudo docker run --gpus all --rm nvidia/cuda:11.0-base nvidia-smi。",
          "qas": [
            {
              "id": "5-361-12",
              "question": "添加nvidia-docker gpgkey的命令是什么？",
              "answers": [
                {
                  "text": "curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -",
                  "answer_start": 26
                }
              ]
            },
            {
              "id": "5-361-13",
              "question": "安装nvidia-container-toolkit后重启Docker的命令是什么？",
              "answers": [
                {
                  "text": "sudo systemctl restart docker",
                  "answer_start": 225
                }
              ]
            },
            {
              "id": "5-361-14",
              "question": "测试nvidia-container-toolkit是否成功的命令是什么？",
              "answers": [
                {
                  "text": "sudo docker run --gpus all --rm nvidia/cuda:11.0-base nvidia-smi",
                  "answer_start": 259
                }
              ]
            }
          ]
        },
        {
          "context": "部署Pytorch：选1.11.0-cuda11.3-cudnn8-devel镜像，拉取命令加sudo；启动命令为sudo docker run -it --gpus all -v /home/deepin/Desktop/mnist/pytorch:/test pytorch/pytorch:1.11.0-cuda11.3-cudnn8-runtime /bin/bash，进入后cd /test，执行python3 train.py，训练设备为CUDA则成功。",
          "qas": [
            {
              "id": "5-361-15",
              "question": "本次部署Pytorch选择的镜像tag是什么？",
              "answers": [
                {
                  "text": "1.11.0-cuda11.3-cudnn8-devel",
                  "answer_start": 16
                }
              ]
            },
            {
              "id": "5-361-16",
              "question": "启动Pytorch Docker镜像并挂载数据集路径的命令是什么？",
              "answers": [
                {
                  "text": "sudo docker run -it --gpus all -v /home/deepin/Desktop/mnist/pytorch:/test pytorch/pytorch:1.11.0-cuda11.3-cudnn8-runtime /bin/bash",
                  "answer_start": 54
                }
              ]
            },
            {
              "id": "5-361-17",
              "question": "Pytorch框架下验证环境成功的标志是什么？",
              "answers": [
                {
                  "text": "训练设备为CUDA（即NVIDIA的GPU）",
                  "answer_start": 218
                }
              ]
            }
          ]
        },
        {
          "context": "部署TensorFlow：拉取镜像命令为sudo docker pull tensorflow/tensorflow:latest-gpu；启动命令为sudo docker run -it --gpus all -v /home/deepin/Desktop/mnist/tensorflow:/test tensorflow/tensorflow:latest-gpu /bin/bash，cd /test后执行python train.py；五个EPOCH用时9.3825秒，ACC 97.73%，LOSS 0.756。",
          "qas": [
            {
              "id": "5-361-18",
              "question": "拉取TensorFlow GPU镜像的命令是什么？",
              "answers": [
                {
                  "text": "sudo docker pull tensorflow/tensorflow:latest-gpu",
                  "answer_start": 22
                }
              ]
            },
            {
              "id": "5-361-19",
              "question": "TensorFlow框架下训练MNIST数据集五个EPOCH的用时是多少？",
              "answers": [
                {
                  "text": "9.3825秒",
                  "answer_start": 198
                }
              ]
            },
            {
              "id": "5-361-20",
              "question": "TensorFlow框架下训练MNIST数据集的最终ACC是多少？",
              "answers": [
                {
                  "text": "97.73%",
                  "answer_start": 213
                }
              ]
            }
          ]
        },
        {
          "context": "部署PaddlePaddle：拉取镜像命令为sudo docker pull paddlepaddle/paddle:2.0.1-gpu-cuda11.0-cudnn8；启动命令为sudo docker run -it --gpus all -v /home/deepin/Desktop/mnist/paddlepaddle:/test paddlepaddle/paddle:2.0.1-gpu-cuda11.0-cudnn8 /bin/bash；五个EPOCH用时10.3678秒，ACC 98.57%，LOSS 0.0850，成功调起cuDNN库。",
          "qas": [
            {
              "id": "5-361-21",
              "question": "拉取PaddlePaddle GPU镜像的命令是什么？",
              "answers": [
                {
                  "text": "sudo docker pull paddlepaddle/paddle:2.0.1-gpu-cuda11.0-cudnn8",
                  "answer_start": 22
                }
              ]
            },
            {
              "id": "5-361-22",
              "question": "PaddlePaddle框架下训练MNIST数据集的最终LOSS是多少？",
              "answers": [
                {
                  "text": "0.0850",
                  "answer_start": 215
                }
              ]
            },
            {
              "id": "5-361-23",
              "question": "PaddlePaddle框架部署成功的一个表现是什么？",
              "answers": [
                {
                  "text": "成功调起cuDNN库",
                  "answer_start": 225
                }
              ]
            }
          ]
        },
        {
          "context": "本次搭建总结：在deepin中安装支持CUDA的闭源显卡驱动；用Docker CE和对应镜像部署Pytorch、TensorFlow、PaddlePaddle；在Docker内成功调用GPU训练模型。",
          "qas": [
            {
              "id": "5-361-24",
              "question": "本次环境搭建中安装的显卡驱动类型是什么？",
              "answers": [
                {
                  "text": "支持CUDA的闭源显卡驱动",
                  "answer_start": 16
                }
              ]
            },
            {
              "id": "5-361-25",
              "question": "本次部署的三个主流机器学习训练框架是什么？",
              "answers": [
                {
                  "text": "Pytorch、TensorFlow、PaddlePaddle",
                  "answer_start": 54
                }
              ]
            }
          ]
        },
        {
          "context": "在 deepin 社区版 20.6 发布后，社区小伙伴对在 deepin 上如何进行机器学习表现出浓厚的兴趣。为此，咱们趁热打铁的介绍 Pytorch、TensorFlow、PaddlePaddle 三款主流训练框架在 deepin 的环境搭建全过程，其中不乏踩过的坑和收获的经验，包括在Linux上安装显卡驱动、配置 Docker、部署训练框架等。",
          "qas": [
            {
              "id": "5-361-26",
              "question": "为什么社区对在deepin上进行机器学习感兴趣？",
              "answers": [
                {
                  "text": "deepin 社区版 20.6 发布后",
                  "answer_start": 2
                }
              ]
            },
            {
              "id": "5-361-27",
              "question": "环境搭建过程包括哪些主要步骤？",
              "answers": [
                {
                  "text": "安装显卡驱动、配置 Docker、部署训练框架",
                  "answer_start": 125
                }
              ]
            }
          ]
        },
        {
          "context": "我们首先从显卡驱动的安装谈起，因为众所周知，在机器学习领域利用显卡对模型进行计算和加速发挥作用举足轻重的作用。这里的显卡驱动安装指的是安装 NVIDIA 的闭源驱动，不使用开源的 nouveau 驱动的原因是它无法调起 NVIDIA 显卡内部的 CUDA 单元，也无法使用 NVIDIA 的 cuDNN 库为整个训练过程进行加速等等。",
          "qas": [
            {
              "id": "5-361-28",
              "question": "为什么在机器学习中显卡驱动很重要？",
              "answers": [
                {
                  "text": "在机器学习领域利用显卡对模型进行计算和加速发挥作用举足轻重的作用",
                  "answer_start": 33
                }
              ]
            },
            {
              "id": "5-361-29",
              "question": "为什么不使用nouveau开源驱动？",
              "answers": [
                {
                  "text": "它无法调起 NVIDIA 显卡内部的 CUDA 单元，也无法使用 NVIDIA 的 cuDNN 库为整个训练过程进行加速等等",
                  "answer_start": 134
                }
              ]
            }
          ]
        },
        {
          "context": "首先我们需要在终端中执行命令 nvidia-smi 来检查是否已经安装了 NVIDIA 闭源驱动。nvidia-smi（简称 NVSMI）是一个跨平台工具，主要提供监控 NVIDIA GPU 使用情况和更改 其状态的功能，这个工具是 N 卡闭源驱动附带的，驱动安装好之后就会有这个命令，反之如果没能正确配置 N 卡的闭源驱动，则执行此命令会产生报错。",
          "qas": [
            {
              "id": "5-361-30",
              "question": "nvidia-smi的主要功能是什么？",
              "answers": [
                {
                  "text": "监控 NVIDIA GPU 使用情况和更改 其状态的功能",
                  "answer_start": 97
                }
              ]
            }
          ]
        },
        {
          "context": "在NVIDIA 官网查询显卡匹配的驱动版本（https://www.nvidia.com/Download/index.aspx)，对于 deepin 而言，Operating System 一栏直接选择 Linux 64 bit 即可，其余选项则根据自己显卡的情况进行选择即可。而本次教程的选择如下图所示：",
          "qas": []
        },
        {
          "context": "第一步：按组合键（<kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>F2</kbd>） 打开 tty ，按照提示输入用户名和密码，然后执行 sudo init 3 关闭图形界面；",
          "qas": []
        },
        {
          "context": "在 tty 中使用 `sudo sh /YourSavePath/xxx.run` 命令安装显卡驱动，其中 YourSavePath 是你的 xxx.run 文件的保存位置，你也可以像我一样，先把目录切到目标位置，然后执行 `sudo sh xxx.run`。随后就会进入正式的安装过程：",
          "qas": [
            {
              "id": "5-361-31",
              "question": "安装显卡驱动的两种命令格式是什么？",
              "answers": [
                {
                  "text": "`sudo sh /YourSavePath/xxx.run` 或 `sudo sh xxx.run`",
                  "answer_start": 13
                }
              ]
            }
          ]
        },
        {
          "context": "等待安装完成且没有报错后，使用 `reboot` 命令重启系统，然后在终端中运行 `nvidia-smi` 命令查看显卡相关信息，或是使用 `nvidia-settings` 命令可以打开 NVIDIA 图形设置界面。若这两个命令均可运行则说明显卡驱动安装成功。",
          "qas": [
            {
              "id": "5-361-32",
              "question": "如何验证显卡驱动安装成功？",
              "answers": [
                {
                  "text": "在终端中运行 `nvidia-smi` 命令查看显卡相关信息，或是使用 `nvidia-settings` 命令可以打开 NVIDIA 图形设置界面",
                  "answer_start": 49
                }
              ]
            }
          ]
        },
        {
          "context": "更新源\n```\n$ sudo apt update\n```",
          "qas": []
        },
        {
          "context": "添加源，可手动选择使用 debian 10 的包\n```\n$ curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\n\n$ curl -s -L https://nvidia.github.io/nvidia-docker/debian10/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\n```",
          "qas": [
            {
              "id": "5-361-33",
              "question": "添加nvidia-docker源的两条命令是什么？",
              "answers": [
                {
                  "text": "curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -",
                  "answer_start": 50
                },
                {
                  "text": "curl -s -L https://nvidia.github.io/nvidia-docker/debian10/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list",
                  "answer_start": 115
                }
              ]
            }
          ]
        },
        {
          "context": "当看到和直接执行 nvidia-smi 命令的输出差不多的界面时，即表示我们的 docker 环境可以正确调起部署在宿主机上的 N 卡。",
          "qas": [
            {
              "id": "5-361-34",
              "question": "如何确认docker可以正确调用N卡？",
              "answers": [
                {
                  "text": "和直接执行 nvidia-smi 命令的输出差不多的界面时",
                  "answer_start": 7
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}