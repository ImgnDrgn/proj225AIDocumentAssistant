{
  "data": [
    {
      "title": "Linux内核概念和学习路线",
      "paragraphs": [
        {
          "context": "内核是与计算机硬件接口的易替换软件的最低级别。它负责将所有以“用户模式”运行的应用程序连接到物理硬件，并允许称为服务器的进程使用进程间通信(IPC)彼此获取信息。",
          "qas": [
            {
              "question": "内核是什么？",
              "id": "3-98-1",
              "answers": [
                {
                  "text": "内核是与计算机硬件接口的易替换软件的最低级别。",
                  "answer_start": 0
                }
              ]
            },
            {
              "question": "内核的作用是什么？",
              "id": "3-98-2",
              "answers": [
                {
                  "text": "负责将所有以“用户模式”运行的应用程序连接到物理硬件，并允许称为服务器的进程使用进程间通信(IPC)彼此获取信息。",
                  "answer_start": 36
                }
              ]
            }
          ]
        },
        {
          "context": "微内核只管理它必须管理的东西:CPU、内存和IPC。计算机中几乎所有的东西都可以被看作是一个附件，并且可以在用户模式下处理。",
          "qas": [
            {
              "question": "微内核管理哪些内容？",
              "id": "3-98-3",
              "answers": [
                {
                  "text": "CPU、内存和IPC",
                  "answer_start": 24
                }
              ]
            }
          ]
        },
        {
          "context": "微内核具有可移植性的优势，因为只要操作系统仍然试图以相同的方式访问硬件，就不必担心您是否更改了视频卡，甚至是操作系统。微内核对内存和安装空间的占用也非常小，而且它们往往更安全，因为只有特定的进程在用户模式下运行，而用户模式不具有管理员模式的高权限。",
          "qas": [
            {
              "question": "微内核的优势有哪些？",
              "id": "3-98-4",
              "answers": [
                {
                  "text": "可移植性、对内存和安装空间的占用小、更安全",
                  "answer_start": 5
                }
              ]
            }
          ]
        },
        {
          "context": "微内核的缺点：通过驱动程序，硬件更加抽象；硬件可能反应较慢，因为驱动程序处于用户模式；进程必须在队列中等待才能获得信息；进程不能在不等待的情况下访问其他进程。",
          "qas": [
            {
              "question": "微内核的缺点是什么？",
              "id": "3-98-5",
              "answers": [
                {
                  "text": "通过驱动程序，硬件更加抽象；硬件可能反应较慢，因为驱动程序处于用户模式；进程必须在队列中等待才能获得信息；进程不能在不等待的情况下访问其他进程。",
                  "answer_start": 6
                }
              ]
            }
          ]
        },
        {
          "context": "单内核不仅包含CPU、内存和IPC，而且还包含设备驱动程序、文件系统管理和系统服务器调用等内容。",
          "qas": [
            {
              "question": "单内核包含哪些内容？",
              "id": "3-98-6",
              "answers": [
                {
                  "text": "CPU、内存、IPC、设备驱动程序、文件系统管理和系统服务器调用等内容。",
                  "answer_start": 5
                }
              ]
            }
          ]
        },
        {
          "context": "单内核的优点：更直接地访问程序的硬件；流程之间更容易通信；如果支持您的设备，它应该不需要额外安装就可以工作；进程反应更快，因为没有等待处理器时间的队列。",
          "qas": [
            {
              "question": "单内核的优点有哪些？",
              "id": "3-98-7",
              "answers": [
                {
                  "text": "更直接地访问程序的硬件；流程之间更容易通信；如果支持您的设备，它应该不需要额外安装就可以工作；进程反应更快，因为没有等待处理器时间的队列。",
                  "answer_start": 6
                }
              ]
            }
          ]
        },
        {
          "context": "单内核的缺点：较大安装体积；较大内存占用；不太安全，因为所有操作都在管理模式下运行。",
          "qas": [
            {
              "question": "单内核的缺点是什么？",
              "id": "3-98-8",
              "answers": [
                {
                  "text": "较大安装体积；较大内存占用；不太安全，因为所有操作都在管理模式下运行。",
                  "answer_start": 6
                }
              ]
            }
          ]
        },
        {
          "context": "混合内核能够选择在用户模式下运行什么，以及在管理模式下运行什么。通常情况下，设备驱动程序和文件系统I/O将在用户模式下运行，而IPC和服务器调用将保持在管理器模式下。",
          "qas": [
            {
              "question": "混合内核的特点是什么？",
              "id": "3-98-9",
              "answers": [
                {
                  "text": "能够选择在用户模式下运行什么，以及在管理模式下运行什么。通常情况下，设备驱动程序和文件系统I/O将在用户模式下运行，而IPC和服务器调用将保持在管理器模式下。",
                  "answer_start": 5
                }
              ]
            }
          ]
        },
        {
          "context": "混合内核的优点：开发人员可以选择什么在用户模式下运行，什么在管理模式下运行；比单片内核更小的安装占用空间；比其他型号更灵活。",
          "qas": [
            {
              "question": "混合内核的优点有哪些？",
              "id": "3-98-10",
              "answers": [
                {
                  "text": "开发人员可以选择什么在用户模式下运行，什么在管理模式下运行；比单片内核更小的安装占用空间；比其他型号更灵活。",
                  "answer_start": 6
                }
              ]
            }
          ]
        },
        {
          "context": "混合内核的缺点：会遭受与微内核相同的进程延迟；设备驱动程序需要由用户管理(通常)。",
          "qas": [
            {
              "question": "混合内核的缺点是什么？",
              "id": "3-98-11",
              "answers": [
                {
                  "text": "会遭受与微内核相同的进程延迟；设备驱动程序需要由用户管理(通常)。",
                  "answer_start": 6
                }
              ]
            }
          ]
        },
        {
          "context": "Ubuntu中的内核文件存储在/boot文件夹中，称为vmlinux -version。",
          "qas": [
            {
              "question": "Ubuntu中的内核文件存储在哪里？名称是什么？",
              "id": "3-98-12",
              "answers": [
                {
                  "text": "存储在/boot文件夹中，称为vmlinux -version。",
                  "answer_start": 8
                }
              ]
            }
          ]
        },
        {
          "context": "vmlinuz这个名字来自于unix世界，早在60年代，他们就把内核简单地称为“unix”，所以当内核在90年代首次开发时，Linux就开始把内核称为“Linux”。当开发虚拟内存以便更容易地进行多任务处理时，将“vm”放在文件的前面，以显示内核支持虚拟内存。有一段时间，Linux内核被称为vmlinux，但是内核变得太大，无法装入可用的引导内存，因此压缩了内核映像，并将末尾的x更改为z，以显示它是用zlib压缩的。",
          "qas": [
            {
              "question": "vmlinuz这个名字的由来是什么？",
              "id": "3-98-13",
              "answers": [
                {
                  "text": "来自于unix世界，60年代unix把内核称为“unix”，90年代Linux开始把内核称为“Linux”；开发虚拟内存后，“vm”放在前面显示支持虚拟内存；内核太大压缩后，末尾x改为z显示用zlib压缩。",
                  "answer_start": 0
                }
              ]
            }
          ]
        },
        {
          "context": "在/boot文件夹中还有其他非常重要的文件，称为initrd.img-version、system.map-version, config-version。initrd文件用作一个小RAM磁盘，用于提取和执行实际的内核文件。这个系统。map文件用于内核完全加载之前的内存管理，配置文件告诉内核在编译内核映像时要加载哪些选项和模块。",
          "qas": [
            {
              "question": "/boot文件夹中除了内核文件还有哪些重要文件？",
              "id": "3-98-14",
              "answers": [
                {
                  "text": "initrd.img-version、system.map-version, config-version",
                  "answer_start": 17
                }
              ]
            },
            {
              "question": "initrd文件的作用是什么？",
              "id": "3-98-15",
              "answers": [
                {
                  "text": "用作一个小RAM磁盘，用于提取和执行实际的内核文件。",
                  "answer_start": 59
                }
              ]
            },
            {
              "question": "system.map文件的作用是什么？",
              "id": "3-98-16",
              "answers": [
                {
                  "text": "用于内核完全加载之前的内存管理",
                  "answer_start": 103
                }
              ]
            },
            {
              "question": "config文件的作用是什么？",
              "id": "3-98-17",
              "answers": [
                {
                  "text": "告诉内核在编译内核映像时要加载哪些选项和模块。",
                  "answer_start": 140
                }
              ]
            }
          ]
        },
        {
          "context": "因为Linux内核是单片的，所以它比其他类型的内核占用空间最大，复杂度也最高。",
          "qas": [
            {
              "question": "Linux内核属于哪种类型？有什么特点？",
              "id": "3-98-18",
              "answers": [
                {
                  "text": "单片内核，比其他类型的内核占用空间最大，复杂度也最高。",
                  "answer_start": 5
                }
              ]
            }
          ]
        },
        {
          "context": "Linux内核开发人员使内核模块可以在运行时加载和卸载，这意味着您可以动态地添加或删除内核的特性。",
          "qas": [
            {
              "question": "Linux内核开发人员为解决单内核缺陷做了什么？",
              "id": "3-98-19",
              "answers": [
                {
                  "text": "使内核模块可以在运行时加载和卸载，可动态地添加或删除内核的特性。",
                  "answer_start": 17
                }
              ]
            }
          ]
        },
        {
          "context": "内核模块，也称为可加载内核模块(LKM)，对于保持内核在不消耗所有可用内存的情况下与所有硬件一起工作是必不可少的。模块通常向基本内核添加设备、文件系统和系统调用等功能。lkm的文件扩展名是.ko，通常存储在/lib/modules目录中。",
          "qas": [
            {
              "question": "什么是内核模块？",
              "id": "3-98-20",
              "answers": [
                {
                  "text": "也称为可加载内核模块(LKM)，对于保持内核在不消耗所有可用内存的情况下与所有硬件一起工作是必不可少的。",
                  "answer_start": 0
                }
              ]
            },
            {
              "question": "内核模块的作用是什么？",
              "id": "3-98-21",
              "answers": [
                {
                  "text": "通常向基本内核添加设备、文件系统和系统调用等功能。",
                  "answer_start": 94
                }
              ]
            },
            {
              "question": "lkm的文件扩展名是什么？通常存储在哪里？",
              "id": "3-98-22",
              "answers": [
                {
                  "text": "文件扩展名是.ko，通常存储在/lib/modules目录中。",
                  "answer_start": 143
                }
              ]
            }
          ]
        },
        {
          "context": "可以通过在启动时使用menuconfig命令将模块设置为load或not load，或者通过编辑/boot/config文件，或者使用modprobe命令动态地加载和卸载模块，轻松定制内核。",
          "qas": [
            {
              "question": "如何定制内核模块？",
              "id": "3-98-23",
              "answers": [
                {
                  "text": "在启动时使用menuconfig命令设置模块load或not load；编辑/boot/config文件；使用modprobe命令动态地加载和卸载模块。",
                  "answer_start": 5
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}